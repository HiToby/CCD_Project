/**********************************************************
*Copyright(c) Automation Excellence Class
*FileName: Traffic.c
*Author: YJH
*Date:  2017/08/31
*Description: 交通相关各种初始化以及基本操作
*Others: 无
*Function List:
*History:  
    1.Date:
      Author:
      Modification:
    2.
**********************************************************/

#include "Traffic.h"
#include "Head.h"

//汽车初始化时候的坐标
const int Car_Location[15][3][2] = {
{{91,0},    {115,0},   {139,0}		},
{{358,0},   {382,0},   {406,0}		},
{{689,0},   {713,0},   {737,0}		},
{{0,0},     {0,0},     {0,0}		},
{{0,0},     {0,0},     {0,0}		},
{{0,0},     {0,0},     {0,0}		},
{{0,0},     {0,0},     {0,0}		},
{{0,0},     {0,0},     {0,0}		},
{{0,0},     {0,0},     {0,0}		},
{{213,768}, {189,768}, {165,768}	},
{{1024,364},{1024,388},{1024,412}	},
{{0,0},     {0,0},     {0,0}		},
{{0,0},     {0,0},     {0,0}		},
{{0,703},   {0,679},   {0,655}		},
{{1024,581}, {1024,605},{1024,629}	}
};


//每个路口节点的第二车道坐标信息
const int Road_Location[15][4][2] = {
{{191,0},   {0,0},     {0,0},     {0,0}      },
{{458,0},   {0,0},     {0,0},     {0,0}      },
{{789,0},   {0,0},     {0,0},     {0,0}      },
{{115,150}, {180,196}, {0,0},     {0,0}      },
{{382,150}, {425,229}, {0,0},     {0,0}      },
{{313,238}, {363,340}, {258,389}, {207,288}  },
{{191,474}, {148,396}, {0,0},     {0,0}      },
{{430,390}, {351,431}, {0,0},     {0,0}      },
{{713,354}, {824,389}, {789,500}, {677,465}  },
{{1024,465},{0,0},     {0,0},     {0,0}      },
{{0,605},   {0,0},     {0,0},     {0,0}      },
{{115,570}, {225,605}, {190,716}, {80,681}   },
{{712,570}, {824,605}, {677,681}, {0,0}      },
{{1024,681},{0,0},     {0,0},     {0,0}      },
{{115,768}, {0,0},     {0,0},     {0,0}      }
};

// 地图的邻接矩阵
const int Map[Node_Num][Node_Num] = {
//   0 1 2  3 4 5 6  7 8 9 A  B C D E
	{0,0,0, 1,0,0,0, 0,0,0,0, 0,0,0,0},	//0
	{0,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0},	//1
	{0,0,0, 0,0,0,0, 0,1,0,0, 0,0,0,0},	//2

	{1,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,0},	//3
	{0,1,0, 0,0,1,0, 0,0,0,0, 0,0,0,0},	//4
	{0,0,0, 1,1,0,1, 1,0,0,0, 0,0,0,0},	//5
	{0,0,0, 0,0,1,0, 0,0,0,0, 1,0,0,0},	//6

	{0,0,0, 0,0,1,0, 0,1,0,0, 0,0,0,0},	//7
	{0,0,1, 0,0,0,0, 1,0,1,0, 0,1,0,0},	//8
	{0,0,0, 0,0,0,0, 0,1,0,0, 0,0,0,0},	//9
	{0,0,0, 0,0,0,0, 0,0,0,0, 1,0,0,0},	//10

	{0,0,0, 0,0,0,1, 0,0,0,1, 0,1,0,1},	//11
	{0,0,0, 0,0,0,0, 0,1,0,0, 1,0,1,0},	//12
	{0,0,0, 0,0,0,0, 0,0,0,0, 0,1,0,0},	//13
	{0,0,0, 0,0,0,0, 0,0,0,0, 1,0,0,0},	//14
};
// 路口种类
const int TypeRoad[Node_Num] = 
//   0 1 2  3 4 5 6  7 8 9 A  B C D E
	{3,3,3, 2,2,0,2, 2,0,3,3, 0,1,3,3};


/*************************************************
*Function: void TrafficInit(void);
*Description: 整个交通系统的初始化
*Calls: // 被本函数调用的函数清单
*Input: mode : 无;
*Output: 错误信息
*Return:
*Others: 初始化道路角度，红路灯，四个十字路口
*************************************************/
void TrafficInit(void)
{
	int i;

	for (i = 0; i <= Node_Num; i++)
	{
		//初始化种类和数目
		Intersection[i].type = TypeRoad[i];
		Intersection[i].num  = Road_NumMax - Intersection[i].type;

		//初始化角度
		switch(TypeRoad[i])
		{
			/*十字路口初始化*/
			case 0:
				if (i == 5)
				{
					Intersection[i].arc = 45;
				} else
				{
					Intersection[i].arc = 0;
				}
				break;

			case 1:
			case 3:
				Intersection[i].arc = 0;
				break;

			/*45°弯道初始化*/
			case 2:
				if (i == 4) Intersection[i].arc = 45;
				if (i == 7) Intersection[i].arc = 135;
				if (i == 6) Intersection[i].arc = 225;
				if (i == 3) Intersection[i].arc = 315;
				break;
		}

		//初始化红绿灯
		
		//初始化道路
		RoadInit(& Intersection[i],i);
	}
}

/*************************************************
*Function: void RoadInit(void);
*Description: 整个道路系统的初始化
*Calls: // 被本函数调用的函数清单
*Input: mode : 无;
*Output: 错误信息
*Return:
*Others: 初始化的为四个十字路口信息
*************************************************/
void RoadInit(_Crossroad * Inter,int InterNum)
{
	int i;  // 车道循环变量
	int j;  // 左转右转直行车道循环变量
	_CAR * Tail;

	/*int Link[Node_Num][Node_Num] = {
	//   0 1 2  3 4 5 6  7 8 9 A  B C D E
	{0,0,0, 1,0,0,0, 0,0,0,0, 0,0,0,0},	//0
	{0,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0},	//1
	{0,0,0, 0,0,0,0, 0,1,0,0, 0,0,0,0},	//2

	{1,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,0},	//3
	{0,1,0, 0,0,1,0, 0,0,0,0, 0,0,0,0},	//4
	{0,0,0, 1,1,0,1, 1,0,0,0, 0,0,0,0},	//5
	{0,0,0, 0,0,1,0, 0,0,0,0, 1,0,0,0},	//6

	{0,0,0, 0,0,1,0, 0,1,0,0, 0,0,0,0},	//7
	{0,0,1, 0,0,0,0, 1,0,1,0, 0,1,0,0},	//8
	{0,0,0, 0,0,0,0, 0,1,0,0, 0,0,0,0},	//9
	{0,0,0, 0,0,0,0, 0,0,0,0, 1,0,0,0},	//10

	{0,0,0, 0,0,0,1, 0,0,0,1, 0,1,0,1},	//11
	{0,0,0, 0,0,0,0, 0,1,0,0, 1,0,1,0},	//12
	{0,0,0, 0,0,0,0, 0,0,0,0, 0,1,0,0},	//13
	{0,0,0, 0,0,0,0, 0,0,0,0, 1,0,0,0},	//14
	};*/

	for (i = 0; i < Inter->num; i++)
		for (j = 0; j < RoadType_Num; j++)
		{
			Inter->Road[i][j].end = InterNum;
			
		}

	switch(Inter->type)
	{
		// 十字路口
		case 0:
			// 初始化道路角度和中点坐标
			if (!Inter->arc) //非特殊角度十字路口
			{
				for (i = 0; i < Inter->num; i++)
					for (j = 0; j < RoadType_Num; j++)
					{
						// 初始化道路角度
						Inter->Road[i][j].arc = (i * 90 + 180) % 360;

						// 初始化停车线中点坐标
						if (i & 1) // 道路标号为奇数，即道路为东西方向
						{
							Inter->Road[i][j].x = Road_Location[InterNum][i][0];
							Inter->Road[i][j].y = Road_Location[InterNum][i][1] + ((j - 1) * Road_Width) * sgn(sin(AtoR * Inter->Road[i][j].arc));
						} else 	  // 道路标号为偶数，即道路为南北方向
						{
							Inter->Road[i][j].x = Road_Location[InterNum][i][0] + ((j - 1) * Road_Width) * sgn(cos(AtoR * Inter->Road[i][j].arc));
							Inter->Road[i][j].y = Road_Location[InterNum][i][1];
						}

						// 初始化停车线可见状态
						Inter->Road[i][j].sight = 1;

						// 构建并链接首尾节点 并初始化标识符
						if (Tail = (_CAR *) malloc(sizeof(_CAR)) == NULL)
						{
							delay(5000);
							return 0;
						}
						Inter->Road[i][j].drive_flag = Tail->drive_flag = -2;
						Inter->Road[i][j].prev = NULL;
						Inter->Road[i][j].next = Tail;
						Tail->prev = &Inter->Road[i][j];
						Tail->next = NULL;
					}	
			} else // 特殊角度十字路口
			{
				for (i = 0; i < Inter->num; i++)
					for (j = 0; j < RoadType_Num; j++)
					{
						// 初始化道路角度
						Inter->Road[i][j].arc = (i * 90 + 225) % 360;

						// 初始化停车线中点坐标
						Inter->Road[i][j].x = Road_Location[InterNum][i][0] + ((j - 1) * Road_Width) * sgn(cos(AtoR * Inter->Road[i][j].arc));
						Inter->Road[i][j].y = Road_Location[InterNum][i][1] + ((j - 1) * Road_Width) * sgn(sin(AtoR * Inter->Road[i][j].arc));

						// 初始化停车线可见状态
						Inter->Road[i][j].sight = 1;

						// 构建并链接首尾节点 并初始化标识符
						if (Tail = (_CAR *) malloc(sizeof(_CAR)) == NULL)
						{
							delay(5000);
							return 0;
						}
						Inter->Road[i][j].drive_flag = Tail->drive_flag = -2;
						Inter->Road[i][j].prev = NULL;
						Inter->Road[i][j].next = Tail;
						Tail->prev = &Inter->Road[i][j];
						Tail->next = NULL;
					}
			}

			break;


		// 丁字路口
		case 1:
			for (i = 0; i < Inter->num; i++)
				for (j = 0; j < RoadType_Num; j++)
				{
					// 初始化道路角度
					Inter->Road[i][j].arc = ((i == 0) ? 180 : (i == 1) ? 270 : 90);

					// 初始化停车线中点坐标
					if (i != 0) // 1，2号道路为东西方向
					{
						Inter->Road[i][j].x = Road_Location[InterNum][i][0];
						Inter->Road[i][j].y = Road_Location[InterNum][i][1] + ((j - 1) * Road_Width) * sgn(sin(AtoR * Inter->Road[i][j].arc));
					} else 	  // 0号道路为南北方向
					{
						Inter->Road[i][j].x = Road_Location[InterNum][i][0] + ((j - 1) * Road_Width) * sgn(cos(AtoR * Inter->Road[i][j].arc));
						Inter->Road[i][j].y = Road_Location[InterNum][i][1];
					}

					// 初始化停车线可见状态
					Inter->Road[i][j].sight = 1;

					// 构建并链接首尾节点 并初始化标识符
					if (Tail = (_CAR *) malloc(sizeof(_CAR)) == NULL)
					{
						delay(5000);
						return 0;
					}
					Inter->Road[i][j].drive_flag = Tail->drive_flag = -2;
					Inter->Road[i][j].prev = NULL;
					Inter->Road[i][j].next = Tail;
					Tail->prev = &Inter->Road[i][j];	
					Tail->next = NULL;				
				}
			break;
		

		// 45°弯道
		case 2:
			// 初始化道路角度
			switch(InterNum)
			{
				case 3:
					for (j = 0; j < RoadType_Num; j++)
					{
						Inter->Road[0][j].arc = 180;
						Inter->Road[1][j].arc = 315;
					}
					break;

				case 4:
					for (j = 0; j < RoadType_Num; j++)
					{
						Inter->Road[0][j].arc = 180;
						Inter->Road[1][j].arc = 45;
					}	
					break;

				case 6:
					for (j = 0; j < RoadType_Num; j++)
					{
						Inter->Road[0][j].arc = 0;
						Inter->Road[1][j].arc = 225;
					}
					break;

				case 7:
					for (j = 0; j < RoadType_Num; j++)
					{
						Inter->Road[0][j].arc = 270;
						Inter->Road[1][j].arc = 135;
					}
					break;
			}

			// 初始化停车线中点坐标以及停车线可见状态
			for (i = 0; i < Inter->num; i++)
						for (j = 0; j < RoadType_Num; j++)
						{
							Inter->Road[i][j].x = Road_Location[InterNum][i][0] + ((j - 1) * Road_Width) * sgn(cos(AtoR * Inter->Road[i][j].arc));
							Inter->Road[i][j].y = Road_Location[InterNum][i][1] + ((j - 1) * Road_Width) * sgn(sin(AtoR * Inter->Road[i][j].arc));

							// 初始化停车线可见状态
							Inter->Road[i][j].sight = 0;

							// 构建并链接首尾节点 并初始化标识符
							if (Tail = (_CAR *) malloc(sizeof(_CAR)) == NULL)
							{
								delay(5000);
								return 0;
							}
							Inter->Road[i][j].drive_flag = Tail->drive_flag = -2;
							Inter->Road[i][j].prev = NULL;
							Inter->Road[i][j].next = Tail;
							Tail->prev = &Inter->Road[i][j];
							Tail->next = NULL;	
						}
			break;
		

		// 出地图路口
		case 3:
			// 初始化道路角度
			switch(InterNum)
			{
				// 北方出地图车道
				case 0:
				case 1:
				case 2:
					for (i = 0; i < Inter->num; i++)
						for (j = 0; j < RoadType_Num; j++)
						{
							Inter->Road[i][j].arc = 0;
						}

				// 东方出地图车道
				case 9:
				case 13:
					for (i = 0; i < Inter->num; i++)
						for (j = 0; j < RoadType_Num; j++)
						{
							Inter->Road[i][j].arc = 90;
						}

				// 南方出地图车道
				case 14:
					for (i = 0; i < Inter->num; i++)
						for (j = 0; j < RoadType_Num; j++)
						{
							Inter->Road[i][j].arc = 180;
						}

				// 西方出地图车道
				case 10:
					for (i = 0; i < Inter->num; i++)
						for (j = 0; j < RoadType_Num; j++)
						{
							Inter->Road[i][j].arc = 270;
						}
			}


			// 初始化停车线中点坐标以及停车线可见状态
			for (i = 0; i < Inter->num; i++)
				for (j = 0; j < RoadType_Num; j++)
				{
					Inter->Road[i][j].x = Road_Location[InterNum][i][0] + ((j - 1) * Road_Width) * sgn(cos(AtoR * Inter->Road[i][j].arc));
					Inter->Road[i][j].y = Road_Location[InterNum][i][1] + ((j - 1) * Road_Width) * sgn(sin(AtoR * Inter->Road[i][j].arc));

					// 初始化停车线可见状态
					Inter->Road[i][j].sight = 0;

					// 构建并链接首尾节点 并初始化标识符
					if (Tail = (_CAR *) malloc(sizeof(_CAR)) == NULL)
					{
						delay(5000);
						return 0;
					}
					Inter->Road[i][j].drive_flag = Tail->drive_flag = -2;
					Inter->Road[i][j].prev = NULL;
					Inter->Road[i][j].next = Tail;
					Tail->prev = &Inter->Road[i][j];
					Tail->next = NULL;	
				}
			break;
		
	}

}
